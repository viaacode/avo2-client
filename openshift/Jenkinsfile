/* import shared library */
@Library('jenkins-shared-libs')_

def TEMPLATEPATH = 'https://raw.githubusercontent.com/viaacode/avo2-client/master/openshift/avo2-client-tmpl-dc.yaml'
def TEMPLATENAME = 'avo2-client'
def TARGET_NS = 'sc-avo2'
def templateSelector = openshift.selector( "template", "avo2-client")

// def shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
//def tag= sh( returnStdout: true, script: "git describe --tags").tril()


// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
    options {
        // set a timeout of 480m for this pipeline
        timeout(time: 480, unit: 'MINUTES')
    }

	environment {
		VERSION = sh(returnStdout: true, script: "git describe --tags|| echo noTagFound").trim()
		shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
		BRANCH = sh(returnStdout: true, script: "git branch | grep '*' | cut -d ' ' -f2").trim()
		//sh(returnStdout: true, script: 'git describe --tags')
    }
    stages {
        stage('preamble') {
            steps {
                
                script {
                    openshift.withCluster() {
                        openshift.withProject("sc-avo2") {
                            echo "Using project: ${openshift.project()}"
                            echo "Building docker image the avo2-client This is a plain docker build"
			                echo "Running login script for the external docker agent"
			                sh '''#!/bin/bash
			                 /usr/local/bin/agent-login.sh
			                '''
                        }
                    }
                }//end script
            }
        }
        stage('Template update') {
            steps {
                script {echo shortCommit
			            echo VERSION
                        sh'''#!/bin/bash
			            echo commitRef:  ${shortCommit}
                        echo "Configure template, you can use add to project if you want to install the app"
                        oc project sc-avo2
                        oc process -l app=avo2-client -p ENV=int PROXY_URL=http://avo2-proxy-int-sc-avo2.apps.do-prd-okp-m0.do.viaa.be -f openshift/avo2-client-tmpl-dc.yaml | oc apply -f -                          '''
                } // script
            } // step
        } // end stage
        stage('Docker build') {
            steps {
                script {                   
                        sh'''#!/bin/bash
                        echo starting a build 
                        make -f ./openshift/Makefile build
                        '''        
                } // script
            } // steps
        } // stage
        stage('Run UNIT Tests') {
                steps {
                    script {sh'''#!/bin/bash
                        echo "Running make unit_test"                        
                        make -f ./openshift/Makefile unit_test
                        '''
                    }// end script
                }
            }//end stage   
        stage('Push Image') {
            steps {
                script {
                    sh'''#!/bin/bash
                    echo *** PAUSING ROLLOUT  INT***
                    oc rollout pause dc/avo2-client-int 2>/dev/null || echo warn: was paused already
                    echo "pushing image version $VERSION"
                    make -f ./openshift/Makefile push 
                    '''
		        }// end script
            }
        }//end stage
 
        stage('Tag INT Image AND rollout INT') {
                steps {
                    script {
                        sh'''#!/bin/bash
                        echo "tagging int"                   
                        make -f ./openshift/Makefile tag_int 
                        '''
                    }// end script
                    script {
                        sh'''#!/bin/bash
                        echo *** RESUMING rollout ***
                        oc rollout resume dc/avo2-client-int 2>/dev/null || echo "not paused"
                        echo "Waiting deploymentconfig to rollout"
                        make -f ./openshift/Makefile rollout_int
                        #oc rollout latest avo2-client-int
                        '''
                    }// end script               
                }
            }//end stage	
        
        stage('Run INT Tests') {
                steps {
                    script {sh'''#!/bin/bash
                        echo "Running make int_test"                      
                        make -f ./openshift/Makefile int_test
                        echo "Annotate int to set versions in pod and dc"    
                        make -f ./openshift/Makefile versions_int 
                        '''
                    }// end script
                }
            }//end stage
        stage('Rollout Staging') {
                steps {
                    script {sh'''#!/bin/bash
                        echo "Running make staging"
                        make -f ./openshift/Makefile staging 
                        '''
                    }// end script
                }
            }//end stage       	        			    		     
        stage('Deploy production') {
            steps {
            input message: "tag image for pod prd?: avo2-client-prd. Approve?", id: "approval"
                script {
                sh '''#!/bin/bash
                echo current branch: ${GIT_BRANCH#*/} '''
                echo 'I will tag a production image which will roll out !!'
                sh '''#!/bin/bash
                echo "### Using ${GIT_COMMIT} commit ###"
                oc project sc-avo2
                oc tag sc-avo2/avo2-client:${VERSION} sc-avo2/avo2-client:prd
                '''
                        } // script
            } // steps
        } // stage

    } // stages
    post {
        always {
            junit 'ci-results/*.xml'
            
            archiveArtifacts artifacts: 'cypress/videos/**/*.mp4', fingerprint: true
            archiveArtifacts artifacts: 'cypress/screenshots/**/*.png', fingerprint: true
            archiveArtifacts artifacts: 'ci-results/*.xml', fingerprint: true

            script {
               slackNotifier(currentBuild.currentResult)
            }
            cleanWs()
        }
    }
} // pipeline
