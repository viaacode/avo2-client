pipeline {
	agent {
		kubernetes {
			defaultContainer 'oc'
			yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            component: builder
            lang: python
            app: client
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: ibm-cloud.kubernetes.io/worker-pool-name
                        operator: In
                        values:
                          - infra-workers
          tolerations:
            - key: loadType
              operator: Equal
              value: etl-ci
              effect: NoSchedule
          containers:
          - name: default
            resources:
              limits:
                cpu: 1
                memory: 3064Mi
              requests:
                cpu: 300m
                memory: 128Mi
            image: ${getImageFromDockerfile()}
            command:
            - cat
            tty: true
          - name: oc
            image: image-registry.openshift-image-registry.svc:5000/ci-cd/py:3.7
            command:
            - cat
            tty: true
            imagePullPolicy: Always
          - name: buildimage
            image: node:20.4-alpine
            command:
            - cat
            tty: true
            imagePullPolicy: Always
          - name: hasura-cli
            image: hasura/graphql-engine:v2.16.1.cli-migrations-v2
            command:
            - cat
            tty: true
            imagePullPolicy: Always
        """.stripIndent()
		}
	}
	options {
		timeout(time: 45, unit: 'MINUTES')
		disableConcurrentBuilds()
	}
	environment {
		OC_PROJECT = 'avo'
		BASE_IMG = 'nginxinc/nginx-unprivileged'
		OC_URL = 'https://c113-e.private.eu-de.containers.cloud.ibm.com:30227'
		JIRA_URL = 'meemoo.atlassian.net'
		APP_NAME = 'client'
	}

	stages {
		stage('Calculate extra ENV vars') {
			steps {
				script {
					env.GIT_SHORT_COMMIT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true)
					env.IMAGE_TAG = sh(script: 'git describe --tags || echo latest', returnStdout: true)
					// The name used for the build config based on the image tag
					// Replace '.' with '_' as '.' is not allowed.
					env.BUILD_CONFIG_NAME = sh(script: 'echo "${IMAGE_TAG}" | sed -r "s/\\./\\-/g"', returnStdout: true)
				}
			}
		}
		stage('Copy robots.txt for QAS') {
			when {
				not {
					buildingTag()
				}
			}
			steps {
				script {
					// The robots.txt file in the public folder is the production version by default
					// If we're building for QAS, then we override that file with a QAS specific version that disallows any indexing
					sh(script: 'cp ./scripts/robots-QAS.txt ./public/robots.txt', returnStdout: true)
				}
			}
		}
		stage('Test code') {
			//remove echo to hard fail added for debug pipeline
				steps {
					container('buildimage') {
						sh 'apk add --no-cache make bash && make -f ./openshift/Makefile test || echo failed'
				}
			}
		}
		stage('Build code') {
			when {
				not {
					buildingTag()
				}
			  not {
					branch 'develop'
				}
			}
			steps {
				container('oc') {
					script {
						sh '''#!/bin/bash
						set -e
						oc project $OC_PROJECT
						oc import-image $BASE_IMG --confirm
						oc new-build -l ref=$BRANCH_NAME --strategy=docker --name $APP_NAME --to $APP_NAME:$GIT_SHORT_COMMIT --binary --context-dir="" || echo "Probably already exists, start new build"
						sleep 3
						oc annotate --overwrite buildconfig/$APP_NAME ref=$BRANCH_NAME shortcommit=$GIT_SHORT_COMMIT
						patch-bc-current-ref.sh
						oc start-build $APP_NAME --from-dir=. --follow=true --wait=true
						'''
					}
				}
			}
		}
		stage('Deploy INT') {
			when {
				anyOf {
					changeRequest target: 'develop'//'master'
					changeRequest target: 'development' // do not build on master prs
					branch 'develop'; branch 'development'
				}
			}
			steps {
				container('oc') {
					tagNewImage('int')
				}
			}
			post {
				always {
				//	script {
				//		env.BRANCH_NAME = env.CHANGE_BRANCH
				//	}
					jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'int', environmentName: 'int', environmentType: 'testing'
				}
			}
		}



		stage('e2e-prepare') {
			when {
				anyOf {
					changeRequest target: 'develop'//'master'
					changeRequest target: 'development' // do not build on master prs
					branch 'develop'; branch 'development'
				}
			}
			steps {
				container('hasura-cli') {
					script {
					withCredentials([string(credentialsId: 'admin_secret', variable: 'ADMIN_SECRET')]) {
						git branch: 'develop',
						credentialsId: 'meemoo-ci',
						url: 'https://github.com/viaacode/hasura-graphql.git'
						sh """#!/bin/bash
						# hasura-cli seed apply --endpoint=https://hasura-graphql-int-avo.private.cloud.meemoo.be --admin-secret=${ADMIN_SECRET} || echo failed
						# hasura-cli seed apply --endpoint=https://hasura-graphql-int-avo.private.cloud.meemoo.be --admin-secret=${ADMIN_SECRET} --file ../seeds_INT/000___users_idp_map.sql || echo failed
						exit 0
						"""
					}
					}
				}
			}
		}//end stage
		stage('e2e') {
			agent { label 'node' }
			when {
				anyOf {
					changeRequest target: 'develop'//'master'
					changeRequest target: 'development' // do not build on master prs
					branch 'develop'; branch 'development'
				}
			}
			steps {
				script {
					configFileProvider(
						[configFile(fileId: 'end2end_env', variable: 'end2end_env')]) {
								sh ('cat $end2end_env > .env')

						loadEnvironmentVariablesFromFile('.env')
					}
					sh 'echo ${TEST_ACM_DASHBOARD_USERNAME}'
					docker.image('mcr.microsoft.com/playwright:v1.44.0-focal').inside('-e TEST_CLIENT_ENDPOINT=${TEST_CLIENT_ENDPOINT} -e TEST_PROXY_ENDPOINT=${TEST_PROXY_ENDPOINT}  -e TEST_OBJECT_DETAIL_PAGE_VRT=${TEST_OBJECT_DETAIL_PAGE_VRT} -e TEST_OBJECT_DETAIL_PAGE_VLAAMS_PARLEMENT=${TEST_OBJECT_DETAIL_PAGE_VLAAMS_PARLEMENT} -e TEST_VISITOR_ACCOUNT_USERNAME:${TEST_VISITOR_ACCOUNT_USERNAME} -e TEST_VISITOR_ACCOUNT_PASSWORD=${TEST_VISITOR_ACCOUNT_PASSWORD} -e TEST_CP_ADMIN_ACCOUNT_USERNAME=${TEST_CP_ADMIN_ACCOUNT_USERNAME} -e TEST_CP_ADMIN_ACCOUNT_PASSWORD=${TEST_CP_ADMIN_ACCOUNT_PASSWORD} -e TEST_MEEMOO_ADMIN_ACCOUNT_USERNAME=${TEST_MEEMOO_ADMIN_ACCOUNT_USERNAME} -e TEST_MEEMOO_ADMIN_ACCOUNT_PASSWORD=${TEST_MEEMOO_ADMIN_ACCOUNT_PASSWORD} -e TEST_ACM_DASHBOARD=${TEST_ACM_DASHBOARD} -e TEST_ACM_DASHBOARD_USERNAME=${TEST_ACM_DASHBOARD_USERNAME} -e TEST_ACM_DASHBOARD_PASSWORD=${TEST_ACM_DASHBOARD_PASSWORD}')
						{
							git branch: 'develop',
								credentialsId: 'meemoo-ci',
								url: 'https://github.com/viaacode/avo2-client.git'
							catchError() {
							sh '''
							export NODE_ENV=dev
							#npm set-script prepare ""
							npm install --force
							npm install junit-report-builder --save --force
							npm install @playwright/test --force
							npx playwright install
							npx playwright install-deps
							npx playwright install chrome
							'''
							sh "PLAYWRIGHT_JUNIT_OUTPUT_NAME=tests/e2e_test_results.xml npx playwright test --reporter=junit || echo failed "
							junit 'tests/e2e_test_results.xml'
							}
						}
				} //end script
				}
	}
		stage('Deploy TST') {
			when {
				anyOf { branch 'develop'; branch 'development' }
			}
			steps {
				container('oc') {
				// tagNewImage('tst') custom buimd with debug tools
				script {
					sh """#!/bin/bash
					oc project $OC_PROJECT
					oc start-build --follow=true -e DEBUG_TOOLS=true --build-arg DEBUG_TOOLS=true client-tst
					"""
				}
				}
			}
			post {
				always {
				jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'tst', environmentName: 'tst', environmentType: 'staging'
				}
			}
			}
		stage('Deploy QAS') {
			when {
				anyOf { branch 'master'; branch 'main' }
			}
			steps {
				container('oc') {
					tagNewImage('qas')
				}
			}
			post {
				always {
					jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'qas', environmentName: 'qas', environmentType: 'staging'
				}
			}
		}
		stage('Deploy PRD') {
			when {
				buildingTag()
			}
			steps {
				script {
                    // Prompt user for input with a timeout
                    def userInput = input(
                        id: 'userApproval',
                        message: 'Click "Proceed" to start the stage',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with the stage?', name: 'Proceed']
                        ],
                        timeout: 3 * 60 // Timeout in seconds (3 minutes)
                    )

                    // Check user input
                    if (!userInput.Proceed) {
                        error('User did not approve. Exiting stage.')
                    }
                }

				container('oc') {
					tagNewImage('prd')
				}
			}
			post {
				always {
					script {
						previous_tag = sh(script: 'git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`', returnStdout: true).trim()
						echo getAllCommitsBetweenTags(previous_tag, env.TAG_NAME)
					}
					jiraSendDeploymentInfo site: "${JIRA_URL}", environmentId: 'prd', environmentName: 'prd', environmentType: 'production'
				}
			}
		}
	}//end stages
	post {
		success {
			script {
				if (env.BRANCH_NAME.startsWith('PR')) {
					setGitHubBuildStatus('Build', 'SUCCESS')
				}
			}
		}
		failure {
			script {
				if (env.BRANCH_NAME.startsWith('PR')) {
					setGitHubBuildStatus('Build', 'FAILURE')
				}
			}
		}
		always {
			jiraSendBuildInfo site: "${JIRA_URL}"
			container('default') {
				// Archive tets results
				script {
					if (fileExists('./tests/test_results.xml')) {
						junit 'tests/test_results.xml'
					} else {
						echo 'No test results found'
					}
				}
			}
		}
	}
}

String getImageFromDockerfile() {
	return 'nginxinc/nginx-unprivileged:latest'
}
void getBaseImageName() {
 return getImageFromDockerfile().split(':')[0]
}
void setGitHubBuildStatus(String message, String state) {
	step([
		$class            : 'GitHubCommitStatusSetter',
		reposSource       : [$class: 'ManuallyEnteredRepositorySource', url: "${GIT_URL}"],
		commitShaSource   : [$class: 'ManuallyEnteredShaSource', sha: "${GIT_COMMIT}"],
		errorHandlers     : [[$class: 'ChangingBuildStatusErrorHandler', result: 'UNSTABLE']],
		statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]]
	])
}

void getAllCommitsBetweenTags(String from, String to) {
	commit_messages = sh(script: "git log ${from}...${to} --merges --format=%b", returnStdout: true)

	return commit_messages
}

void tagNewImage(String environment) {
	echo "Deploying to ${environment}"
	sh """#!/bin/bash
    oc project $OC_PROJECT
    oc tag $APP_NAME:$GIT_SHORT_COMMIT $APP_NAME:${environment}
    # Check the status of the rollout
    oc rollout status deployment/$APP_NAME-${environment} --watch=true
    """
}
void loadEnvironmentVariablesFromFile(String path) {
    def file = readFile(path)
    file.split('\n').each { envLine ->
        def (key, value) = envLine.tokenize('=')
        env."${key}" = "${value}"
    }
}

