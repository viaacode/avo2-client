/* import shared library */
@Library('jenkins-shared-libs')_

def TEMPLATEPATH = 'https://raw.githubusercontent.com/viaacode/avo2-client/master/openshift/avo2-client-tmpl-dc.yaml'
def TEMPLATENAME = 'avo2-client'
def TARGET_NS = 'sc-avo2'
def templateSelector = openshift.selector( "template", "avo2-client")

// def shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
//def tag= sh( returnStdout: true, script: "git describe --tags").tril()


// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'docker'
      }
    }
    options {
        // set a timeout of 8h for this pipeline
        timeout(time: 480, unit: 'MINUTES')
    }

	environment {
		VERSION = sh(returnStdout: true, script: "git describe || echo noTagFound").trim()
		shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
		BRANCH = sh(returnStdout: true, script: "git branch | grep '*' | cut -d ' ' -f2").trim()
		//sh(returnStdout: true, script: 'git describe --tags')
    }
    stages {
        stage('preamble') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("sc-avo2") {
                            echo "Using project: ${openshift.project()}"
                            echo "We 're about to build the docker image and tag dev and qas images for the avo2-client This is a plain docker build"
			    echo "Running login script for the external docker agent"
			    sh '''#!/bin/bash
			    /usr/local/bin/agent-login.sh
			    '''
                        }
                    }
                }//end script
            }
        }
        stage('Template update') {
            steps {
                script {echo shortCommit
			echo VERSION
                        sh'''#!/bin/bash
			  echo commitRef:  ${shortCommit}
                          echo "Configure template, you can use add to project if you want to install the app in an oteher env eg debug dev etc"
                          oc project sc-avo2
                          oc -n sc-avo2 apply -f openshift/avo2-client-tmpl-dc.yaml
                          oc process -l app=avo2-client -p ENV=dev PROXY_URL=http://avo2-proxy-dev-sc-avo2.apps.do-prd-okp-m0.do.viaa.be -f openshift/avo2-client-tmpl-dc.yaml | oc apply -f -
                          oc process -l app=avo2-client -p ENV=qas PROXY_URL=http://avo2-proxy-qas-sc-avo2.apps.do-prd-okp-m0.do.viaa.be -f openshift/avo2-client-tmpl-dc.yaml | oc apply -f -
                          '''
                } // script
            } // step
        } // end stage
        stage('Docker build') {

            steps {
                script {                   
		    sh'''#!/bin/bash
		    echo starting a build, due miltistage build we need a build / env , this is far from sane, one can not promote images with this
		    oc project sc-avo2
		    docker login -p $(oc whoami -t) -u unused docker-registry-default.apps.do-prd-okp-m0.do.viaa.be
		    docker build --build-arg PROXY_URL=http://avo2-proxy-qas-sc-avo2.apps.do-prd-okp-m0.do.viaa.be . -t docker-registry-default.apps.do-prd-okp-m0.do.viaa.be/sc-avo2/avo2-client:$VERSION
		    '''        
                } // script
            } // steps
        } // stage
        stage('Push Image') {
            steps {
		script {sh'''#!/bin/bash
			     echo "pushing image version $VERSION"
			     docker push docker-registry-default.apps.do-prd-okp-m0.do.viaa.be/sc-avo2/avo2-client:$VERSION
			     '''
		}// end script
            }
        }//end stage
	stage('TAG Image') {
            steps {
		script {sh'''#!/bin/bash
			echo "tagging dev, qas"
			oc project sc-avo2
		        oc tag sc-avo2/avo2-client:$VERSION sc-avo2/avo2-client:dev 
			oc tag sc-avo2/avo2-client:$VERSION sc-avo2/avo2-client:qas
			'''
		}// end script
            }
        }//end stage	 			    		     
        stage('Deploy production') {
         steps {
          input message: "tag image for pod prd?: avo2-client-prd. Approve?", id: "approval"
             script {
		     sh '''#!/bin/bash
		     echo current branch: ${GIT_BRANCH#*/} '''
		     echo 'I will tag a production image which will roll out !!'
		     sh '''#!/bin/bash
		     echo "### Using ${GIT_COMMIT} commit ###"
		     oc project sc-avo2
		     oc tag sc-avo2/avo2-client:${VERSION} sc-avo2/avo2-client:prd
		     '''
                    } // script
         } // steps
     } // stage

    } // stages
    post {
        always {
            script {
               slackNotifier(currentBuild.currentResult)
            }
        }
    }


} // pipeline
